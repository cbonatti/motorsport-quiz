// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorsportQuiz.Infra.Data;

namespace MotorsportQuiz.Infra.Migrations
{
    [DbContext(typeof(MotorsportQuizDbContext))]
    [Migration("20200523051509_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4");

            modelBuilder.Entity("MotorsportQuiz.Domain.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e987dd39-b377-4df0-9b4f-d70538121d70"),
                            Name = "Inglaterra"
                        },
                        new
                        {
                            Id = new Guid("fe5e1bbc-edd7-4153-81a2-add6908b0b1f"),
                            Name = "USA"
                        },
                        new
                        {
                            Id = new Guid("4ef0f07c-2450-454f-8364-f6703621fb3b"),
                            Name = "Alemanha"
                        },
                        new
                        {
                            Id = new Guid("74d4504d-f55b-49a6-b35e-19b90abb8904"),
                            Name = "Japão"
                        });
                });

            modelBuilder.Entity("MotorsportQuiz.Domain.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46800301-9e10-44ce-80ee-c5097e69080a"),
                            Name = "BMW"
                        },
                        new
                        {
                            Id = new Guid("3eb99380-568e-449d-842c-d997a56875c0"),
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = new Guid("473d113f-0279-422a-afb3-6533908df4b9"),
                            Name = "Mini"
                        },
                        new
                        {
                            Id = new Guid("a6c4affe-770d-4258-8906-eb5707756c94"),
                            Name = "General Motors"
                        },
                        new
                        {
                            Id = new Guid("296b4c6f-9dff-492b-90f2-4bcb7d7344cb"),
                            Name = "Rolls-Royce"
                        });
                });

            modelBuilder.Entity("MotorsportQuiz.Domain.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Correct")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9442a0a7-5aed-46c4-949b-b187113f3655"),
                            AnswerId = new Guid("e987dd39-b377-4df0-9b4f-d70538121d70"),
                            Correct = false,
                            QuestionId = new Guid("46800301-9e10-44ce-80ee-c5097e69080a")
                        },
                        new
                        {
                            Id = new Guid("a541be38-14a2-4d0c-a7bf-0525b290f638"),
                            AnswerId = new Guid("fe5e1bbc-edd7-4153-81a2-add6908b0b1f"),
                            Correct = false,
                            QuestionId = new Guid("46800301-9e10-44ce-80ee-c5097e69080a")
                        },
                        new
                        {
                            Id = new Guid("950f98e1-02cf-4d0f-b493-5a59324c38a1"),
                            AnswerId = new Guid("4ef0f07c-2450-454f-8364-f6703621fb3b"),
                            Correct = true,
                            QuestionId = new Guid("46800301-9e10-44ce-80ee-c5097e69080a")
                        },
                        new
                        {
                            Id = new Guid("0b07d90f-bf4e-4dab-9f1d-384ad2ebb07a"),
                            AnswerId = new Guid("74d4504d-f55b-49a6-b35e-19b90abb8904"),
                            Correct = false,
                            QuestionId = new Guid("46800301-9e10-44ce-80ee-c5097e69080a")
                        },
                        new
                        {
                            Id = new Guid("dd9dc0ba-87a7-412f-96ac-a03cdd8be170"),
                            AnswerId = new Guid("e987dd39-b377-4df0-9b4f-d70538121d70"),
                            Correct = false,
                            QuestionId = new Guid("3eb99380-568e-449d-842c-d997a56875c0")
                        },
                        new
                        {
                            Id = new Guid("85ed90d3-19cf-4d2b-bd76-8dcffda82c1d"),
                            AnswerId = new Guid("fe5e1bbc-edd7-4153-81a2-add6908b0b1f"),
                            Correct = false,
                            QuestionId = new Guid("3eb99380-568e-449d-842c-d997a56875c0")
                        },
                        new
                        {
                            Id = new Guid("c3afe181-b3cf-4c7c-bc06-6232066c488d"),
                            AnswerId = new Guid("4ef0f07c-2450-454f-8364-f6703621fb3b"),
                            Correct = false,
                            QuestionId = new Guid("3eb99380-568e-449d-842c-d997a56875c0")
                        },
                        new
                        {
                            Id = new Guid("4aeed317-c192-486c-89e2-d98a7d6c8ea2"),
                            AnswerId = new Guid("74d4504d-f55b-49a6-b35e-19b90abb8904"),
                            Correct = true,
                            QuestionId = new Guid("3eb99380-568e-449d-842c-d997a56875c0")
                        },
                        new
                        {
                            Id = new Guid("d9220995-1c20-4767-aa18-5ecdd2516a15"),
                            AnswerId = new Guid("e987dd39-b377-4df0-9b4f-d70538121d70"),
                            Correct = true,
                            QuestionId = new Guid("473d113f-0279-422a-afb3-6533908df4b9")
                        },
                        new
                        {
                            Id = new Guid("dede8d12-5edd-449f-bad8-03fa2fff2dc5"),
                            AnswerId = new Guid("fe5e1bbc-edd7-4153-81a2-add6908b0b1f"),
                            Correct = false,
                            QuestionId = new Guid("473d113f-0279-422a-afb3-6533908df4b9")
                        },
                        new
                        {
                            Id = new Guid("22d7c535-c2bc-459a-9489-7374f4da2bd0"),
                            AnswerId = new Guid("4ef0f07c-2450-454f-8364-f6703621fb3b"),
                            Correct = false,
                            QuestionId = new Guid("473d113f-0279-422a-afb3-6533908df4b9")
                        },
                        new
                        {
                            Id = new Guid("edc6191c-5e29-48cf-a639-3fbc8d8e0346"),
                            AnswerId = new Guid("74d4504d-f55b-49a6-b35e-19b90abb8904"),
                            Correct = false,
                            QuestionId = new Guid("473d113f-0279-422a-afb3-6533908df4b9")
                        },
                        new
                        {
                            Id = new Guid("bc76d353-e141-490f-9895-5fbcb8696e1c"),
                            AnswerId = new Guid("e987dd39-b377-4df0-9b4f-d70538121d70"),
                            Correct = false,
                            QuestionId = new Guid("a6c4affe-770d-4258-8906-eb5707756c94")
                        },
                        new
                        {
                            Id = new Guid("5083dd2b-fabf-448c-982c-8a7e6fec347d"),
                            AnswerId = new Guid("fe5e1bbc-edd7-4153-81a2-add6908b0b1f"),
                            Correct = true,
                            QuestionId = new Guid("a6c4affe-770d-4258-8906-eb5707756c94")
                        },
                        new
                        {
                            Id = new Guid("dd18653a-b22c-44f5-8f5d-95ed6b4c2aad"),
                            AnswerId = new Guid("4ef0f07c-2450-454f-8364-f6703621fb3b"),
                            Correct = false,
                            QuestionId = new Guid("a6c4affe-770d-4258-8906-eb5707756c94")
                        },
                        new
                        {
                            Id = new Guid("c0efa554-fee2-4e8e-bcdd-9a60e3749557"),
                            AnswerId = new Guid("74d4504d-f55b-49a6-b35e-19b90abb8904"),
                            Correct = false,
                            QuestionId = new Guid("a6c4affe-770d-4258-8906-eb5707756c94")
                        },
                        new
                        {
                            Id = new Guid("2d879fe5-bd54-4aad-9941-2c6cb5f61776"),
                            AnswerId = new Guid("e987dd39-b377-4df0-9b4f-d70538121d70"),
                            Correct = true,
                            QuestionId = new Guid("296b4c6f-9dff-492b-90f2-4bcb7d7344cb")
                        },
                        new
                        {
                            Id = new Guid("79cf6e43-0bc6-460d-87a9-38091ad32c14"),
                            AnswerId = new Guid("fe5e1bbc-edd7-4153-81a2-add6908b0b1f"),
                            Correct = false,
                            QuestionId = new Guid("296b4c6f-9dff-492b-90f2-4bcb7d7344cb")
                        },
                        new
                        {
                            Id = new Guid("ebafa428-9c75-4f7e-9b66-833845580080"),
                            AnswerId = new Guid("4ef0f07c-2450-454f-8364-f6703621fb3b"),
                            Correct = false,
                            QuestionId = new Guid("296b4c6f-9dff-492b-90f2-4bcb7d7344cb")
                        },
                        new
                        {
                            Id = new Guid("73c81d70-1a13-4511-878b-0428c0de83da"),
                            AnswerId = new Guid("74d4504d-f55b-49a6-b35e-19b90abb8904"),
                            Correct = false,
                            QuestionId = new Guid("296b4c6f-9dff-492b-90f2-4bcb7d7344cb")
                        });
                });

            modelBuilder.Entity("MotorsportQuiz.Domain.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Result")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("MotorsportQuiz.Domain.QuestionAnswer", b =>
                {
                    b.HasOne("MotorsportQuiz.Domain.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorsportQuiz.Domain.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
