// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorsportQuiz.Infra.Data;

namespace MotorsportQuiz.Infra.Migrations
{
    [DbContext(typeof(MotorsportQuizDbContext))]
    partial class MotorsportQuizDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4");

            modelBuilder.Entity("MotorsportQuiz.Domain.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e987dd39-b377-4df0-9b4f-d70538121d70"),
                            Name = "Inglaterra"
                        },
                        new
                        {
                            Id = new Guid("fe5e1bbc-edd7-4153-81a2-add6908b0b1f"),
                            Name = "USA"
                        },
                        new
                        {
                            Id = new Guid("4ef0f07c-2450-454f-8364-f6703621fb3b"),
                            Name = "Alemanha"
                        },
                        new
                        {
                            Id = new Guid("74d4504d-f55b-49a6-b35e-19b90abb8904"),
                            Name = "Japão"
                        });
                });

            modelBuilder.Entity("MotorsportQuiz.Domain.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("46800301-9e10-44ce-80ee-c5097e69080a"),
                            Name = "BMW"
                        },
                        new
                        {
                            Id = new Guid("3eb99380-568e-449d-842c-d997a56875c0"),
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = new Guid("473d113f-0279-422a-afb3-6533908df4b9"),
                            Name = "Mini"
                        },
                        new
                        {
                            Id = new Guid("a6c4affe-770d-4258-8906-eb5707756c94"),
                            Name = "General Motors"
                        },
                        new
                        {
                            Id = new Guid("296b4c6f-9dff-492b-90f2-4bcb7d7344cb"),
                            Name = "Rolls-Royce"
                        });
                });

            modelBuilder.Entity("MotorsportQuiz.Domain.QuestionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Correct")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8efb81c1-ef1e-48d1-89ba-97bdcb6e26e7"),
                            AnswerId = new Guid("e987dd39-b377-4df0-9b4f-d70538121d70"),
                            Correct = false,
                            QuestionId = new Guid("46800301-9e10-44ce-80ee-c5097e69080a")
                        },
                        new
                        {
                            Id = new Guid("1dbdaf37-e5dc-42d7-be60-35f07e82e62b"),
                            AnswerId = new Guid("fe5e1bbc-edd7-4153-81a2-add6908b0b1f"),
                            Correct = false,
                            QuestionId = new Guid("46800301-9e10-44ce-80ee-c5097e69080a")
                        },
                        new
                        {
                            Id = new Guid("a386f5d1-741c-40c7-8f2f-b3ace486516d"),
                            AnswerId = new Guid("4ef0f07c-2450-454f-8364-f6703621fb3b"),
                            Correct = true,
                            QuestionId = new Guid("46800301-9e10-44ce-80ee-c5097e69080a")
                        },
                        new
                        {
                            Id = new Guid("58ac5e95-2153-4e8a-b5b3-2d347c9a2b21"),
                            AnswerId = new Guid("74d4504d-f55b-49a6-b35e-19b90abb8904"),
                            Correct = false,
                            QuestionId = new Guid("46800301-9e10-44ce-80ee-c5097e69080a")
                        },
                        new
                        {
                            Id = new Guid("7f1fe989-a7e6-4b78-9c97-8541962ded6a"),
                            AnswerId = new Guid("e987dd39-b377-4df0-9b4f-d70538121d70"),
                            Correct = false,
                            QuestionId = new Guid("3eb99380-568e-449d-842c-d997a56875c0")
                        },
                        new
                        {
                            Id = new Guid("f74f1c10-e9ac-4011-8460-2ec93e495da9"),
                            AnswerId = new Guid("fe5e1bbc-edd7-4153-81a2-add6908b0b1f"),
                            Correct = false,
                            QuestionId = new Guid("3eb99380-568e-449d-842c-d997a56875c0")
                        },
                        new
                        {
                            Id = new Guid("f7cfb9f5-24cf-47e1-89ef-10b2406f7a95"),
                            AnswerId = new Guid("4ef0f07c-2450-454f-8364-f6703621fb3b"),
                            Correct = false,
                            QuestionId = new Guid("3eb99380-568e-449d-842c-d997a56875c0")
                        },
                        new
                        {
                            Id = new Guid("3376fd44-83f1-4659-a42b-85e016009bb8"),
                            AnswerId = new Guid("74d4504d-f55b-49a6-b35e-19b90abb8904"),
                            Correct = true,
                            QuestionId = new Guid("3eb99380-568e-449d-842c-d997a56875c0")
                        },
                        new
                        {
                            Id = new Guid("9fca647a-390c-4b9a-80e5-b1bbc4efb91f"),
                            AnswerId = new Guid("e987dd39-b377-4df0-9b4f-d70538121d70"),
                            Correct = true,
                            QuestionId = new Guid("473d113f-0279-422a-afb3-6533908df4b9")
                        },
                        new
                        {
                            Id = new Guid("aabc2ed9-2af8-4647-8c53-81583d3c76c8"),
                            AnswerId = new Guid("fe5e1bbc-edd7-4153-81a2-add6908b0b1f"),
                            Correct = false,
                            QuestionId = new Guid("473d113f-0279-422a-afb3-6533908df4b9")
                        },
                        new
                        {
                            Id = new Guid("f1e0dc25-2c37-4a86-8cf0-6ee5eea3a2f2"),
                            AnswerId = new Guid("4ef0f07c-2450-454f-8364-f6703621fb3b"),
                            Correct = false,
                            QuestionId = new Guid("473d113f-0279-422a-afb3-6533908df4b9")
                        },
                        new
                        {
                            Id = new Guid("3208939f-49a4-4784-8890-697eb59343d1"),
                            AnswerId = new Guid("74d4504d-f55b-49a6-b35e-19b90abb8904"),
                            Correct = false,
                            QuestionId = new Guid("473d113f-0279-422a-afb3-6533908df4b9")
                        },
                        new
                        {
                            Id = new Guid("d84ae0b2-f7d0-4ef1-9fe1-62910bcd319f"),
                            AnswerId = new Guid("e987dd39-b377-4df0-9b4f-d70538121d70"),
                            Correct = false,
                            QuestionId = new Guid("a6c4affe-770d-4258-8906-eb5707756c94")
                        },
                        new
                        {
                            Id = new Guid("8b8ba378-ace3-4d79-acf8-594545ba3adc"),
                            AnswerId = new Guid("fe5e1bbc-edd7-4153-81a2-add6908b0b1f"),
                            Correct = true,
                            QuestionId = new Guid("a6c4affe-770d-4258-8906-eb5707756c94")
                        },
                        new
                        {
                            Id = new Guid("66b7e245-de57-4e81-901e-8fd930995876"),
                            AnswerId = new Guid("4ef0f07c-2450-454f-8364-f6703621fb3b"),
                            Correct = false,
                            QuestionId = new Guid("a6c4affe-770d-4258-8906-eb5707756c94")
                        },
                        new
                        {
                            Id = new Guid("780681e5-83b7-4fd3-8f18-1650eaf8f2dd"),
                            AnswerId = new Guid("74d4504d-f55b-49a6-b35e-19b90abb8904"),
                            Correct = false,
                            QuestionId = new Guid("a6c4affe-770d-4258-8906-eb5707756c94")
                        },
                        new
                        {
                            Id = new Guid("7a87c0aa-057d-451b-865e-67f87401b46d"),
                            AnswerId = new Guid("e987dd39-b377-4df0-9b4f-d70538121d70"),
                            Correct = true,
                            QuestionId = new Guid("296b4c6f-9dff-492b-90f2-4bcb7d7344cb")
                        },
                        new
                        {
                            Id = new Guid("75080270-7c4b-4eae-bcef-5c32122acaa6"),
                            AnswerId = new Guid("fe5e1bbc-edd7-4153-81a2-add6908b0b1f"),
                            Correct = false,
                            QuestionId = new Guid("296b4c6f-9dff-492b-90f2-4bcb7d7344cb")
                        },
                        new
                        {
                            Id = new Guid("29bb073d-d5a8-4cf8-9040-a76bb7c82b69"),
                            AnswerId = new Guid("4ef0f07c-2450-454f-8364-f6703621fb3b"),
                            Correct = false,
                            QuestionId = new Guid("296b4c6f-9dff-492b-90f2-4bcb7d7344cb")
                        },
                        new
                        {
                            Id = new Guid("53fee0eb-c09d-423f-9b06-0bb1ee3229d8"),
                            AnswerId = new Guid("74d4504d-f55b-49a6-b35e-19b90abb8904"),
                            Correct = false,
                            QuestionId = new Guid("296b4c6f-9dff-492b-90f2-4bcb7d7344cb")
                        });
                });

            modelBuilder.Entity("MotorsportQuiz.Domain.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Result")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("MotorsportQuiz.Domain.QuestionAnswer", b =>
                {
                    b.HasOne("MotorsportQuiz.Domain.Answer", "Answer")
                        .WithMany("Questions")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MotorsportQuiz.Domain.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
